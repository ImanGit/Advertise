// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace Advertise.Web.Controllers
{
    public partial class KendoEditorImagesController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected KendoEditorImagesController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult GetThumbnail()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetThumbnail);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult CreateFolder()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CreateFolder);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult DestroyFile()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DestroyFile);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult GetFile()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetFile);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult GetFilesList()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetFilesList);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UploadFile()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UploadFile);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public KendoEditorImagesController Actions { get { return MVC.KendoEditorImages; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "KendoEditorImages";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "KendoEditorImages";
        [GeneratedCode("T4MVC", "2.0")]
        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string GetThumbnail = "GetThumbnail";
            public readonly string CreateFolder = "CreateFolder";
            public readonly string DestroyFile = "DestroyFile";
            public readonly string GetFile = "GetFile";
            public readonly string GetFilesList = "GetFilesList";
            public readonly string UploadFile = "UploadFile";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string GetThumbnail = "GetThumbnail";
            public const string CreateFolder = "CreateFolder";
            public const string DestroyFile = "DestroyFile";
            public const string GetFile = "GetFile";
            public const string GetFilesList = "GetFilesList";
            public const string UploadFile = "UploadFile";
        }


        static readonly ActionParamsClass_GetThumbnail s_params_GetThumbnail = new ActionParamsClass_GetThumbnail();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetThumbnail GetThumbnailParams { get { return s_params_GetThumbnail; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetThumbnail
        {
            public readonly string path = "path";
        }
        static readonly ActionParamsClass_CreateFolder s_params_CreateFolder = new ActionParamsClass_CreateFolder();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_CreateFolder CreateFolderParams { get { return s_params_CreateFolder; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_CreateFolder
        {
            public readonly string name = "name";
            public readonly string path = "path";
        }
        static readonly ActionParamsClass_DestroyFile s_params_DestroyFile = new ActionParamsClass_DestroyFile();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DestroyFile DestroyFileParams { get { return s_params_DestroyFile; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DestroyFile
        {
            public readonly string name = "name";
            public readonly string path = "path";
        }
        static readonly ActionParamsClass_GetFile s_params_GetFile = new ActionParamsClass_GetFile();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetFile GetFileParams { get { return s_params_GetFile; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetFile
        {
            public readonly string path = "path";
        }
        static readonly ActionParamsClass_GetFilesList s_params_GetFilesList = new ActionParamsClass_GetFilesList();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetFilesList GetFilesListParams { get { return s_params_GetFilesList; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetFilesList
        {
            public readonly string path = "path";
        }
        static readonly ActionParamsClass_UploadFile s_params_UploadFile = new ActionParamsClass_UploadFile();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UploadFile UploadFileParams { get { return s_params_UploadFile; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UploadFile
        {
            public readonly string file = "file";
            public readonly string path = "path";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
            }
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_KendoEditorImagesController : Advertise.Web.Controllers.KendoEditorImagesController
    {
        public T4MVC_KendoEditorImagesController() : base(Dummy.Instance) { }

        [NonAction]
        partial void GetThumbnailOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string path);

        [NonAction]
        public override System.Web.Mvc.ActionResult GetThumbnail(string path)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetThumbnail);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "path", path);
            GetThumbnailOverride(callInfo, path);
            return callInfo;
        }

        [NonAction]
        partial void CreateFolderOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string name, string path);

        [NonAction]
        public override System.Web.Mvc.ActionResult CreateFolder(string name, string path)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CreateFolder);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "name", name);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "path", path);
            CreateFolderOverride(callInfo, name, path);
            return callInfo;
        }

        [NonAction]
        partial void DestroyFileOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string name, string path);

        [NonAction]
        public override System.Web.Mvc.ActionResult DestroyFile(string name, string path)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DestroyFile);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "name", name);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "path", path);
            DestroyFileOverride(callInfo, name, path);
            return callInfo;
        }

        [NonAction]
        partial void GetFileOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string path);

        [NonAction]
        public override System.Web.Mvc.ActionResult GetFile(string path)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetFile);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "path", path);
            GetFileOverride(callInfo, path);
            return callInfo;
        }

        [NonAction]
        partial void GetFilesListOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string path);

        [NonAction]
        public override System.Web.Mvc.ActionResult GetFilesList(string path)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetFilesList);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "path", path);
            GetFilesListOverride(callInfo, path);
            return callInfo;
        }

        [NonAction]
        partial void UploadFileOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, System.Web.HttpPostedFileBase file, string path);

        [NonAction]
        public override System.Web.Mvc.ActionResult UploadFile(System.Web.HttpPostedFileBase file, string path)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UploadFile);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "file", file);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "path", path);
            UploadFileOverride(callInfo, file, path);
            return callInfo;
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
